import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer

import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id 'com.palantir.docker' version '0.22.1'
    id 'io.swagger.core.v3.swagger-gradle-plugin' version '2.0.6'
    id "net.thauvin.erik.gradle.semver" version "1.0.0"
}

group 'severeone.oidc.auth'
description 'OpenID Connect Authorization Server'

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://maven.severeone.xyz/artifactory/gradle-release-local" }
    maven { url "http://maven.severeone.xyz/artifactory/sbt-release-local" }
    maven { url "http://dl.bintray.com/cppexpert/maven" }
    maven { url "https://plugins.gradle.org/m2/" }
    mavenLocal()
}

dependencies {
    compile 'javax.xml.bind:jaxb-api:2.3.0'
    compile 'javax.activation:activation:1.1'
    compile 'io.dropwizard:dropwizard-auth:1.3.+'
    compile 'io.dropwizard:dropwizard-core:1.3.+'
    compile 'io.dropwizard:dropwizard-client:1.3.+'
    compile 'io.dropwizard:dropwizard-db:1.3.+'
    compile 'io.dropwizard:dropwizard-jdbi3:1.3.+'
    compile 'io.dropwizard:dropwizard-validation:1.3.+'
    compile 'org.mindrot:jbcrypt:0.4'
    compile 'severeone.oidc.auth:auth-tokens:1.+'
    compile 'severeone:oidc-services_2.12:1.+'
    compile 'io.swagger:swagger-annotations:1.5.10'
    compile 'org.postgresql:postgresql:42.2.5'
    compile 'org.apache.commons:commons-collections4:4.3'
    compile 'com.nimbusds:nimbus-jose-jwt:7.1'
    compile 'aws-java-sdk:1.11.630'

    testCompile 'io.dropwizard:dropwizard-testing:1.3.+'
    testCompile 'com.shazam:shazamcrest:0.11'
    
    testCompile(
            'junit:junit:4.12',
            'org.junit.jupiter:junit-jupiter-api:5.4.+',
            'org.junit.jupiter:junit-jupiter-params:5.4.+'
    )
    testCompile 'org.testng:testng:6.9.8'
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.4.+',
            'org.junit.vintage:junit-vintage-engine:5.4.+'
    )
    //testRuntime 'org.testng:testng:6.9.8'  // TODO uncomment when TestNG integration test support is added for group "system" 
}

mainClassName = 'severeone.oidc.auth.AuthApp'

run {
    args = ['server', 'config.yml']
}

task cleanTestingDB(type: Exec) {
    workingDir './scripts'
    commandLine './clean-test-db.sh'
}

test {
    // to skip tests run 'gradle build -PexcludeTests=**/*'
    if (project.hasProperty('excludeTests')) {
        exclude project.property('excludeTests')
    }
    dependsOn cleanTestingDB
    environment "INTEGRATION", "1"
    useJUnitPlatform()
}

task initLocal(type: Exec) {
    workingDir './scripts'
    commandLine './init.sh', 'local'
}

task initStaging(type: Exec) {
    workingDir './scripts'
    commandLine './init.sh', 'staging'
}

task initProd(type: Exec) {
    workingDir './scripts'
    commandLine './init.sh', 'production'
}

def versionProps = new Properties()
if (file("./version.properties").isFile()) {
    file("./version.properties").withInputStream { versionProps.load(it) }
} else {
    versionProps.setProperty('version.semver', '0.0.0')
}

incrementBuildMeta {
    doFirst {
        buildMeta = new Date().format("yyyyMMddHHmmss")
    }
}

shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Implementation-Title': rootProject.name
        attributes 'Implementation-Version': versionProps.getProperty('version.semver')
        attributes 'Implementation-Vendor-Id': rootProject.group
        attributes 'Build-Time': ZonedDateTime.now(ZoneId.of("UTC"))
                .format(DateTimeFormatter.ISO_ZONED_DATE_TIME)
        attributes 'Built-By': InetAddress.localHost.hostName
        attributes 'Created-By': 'Gradle ' + gradle.gradleVersion
        attributes 'Main-Class': mainClassName
    }
    transform(AppendingTransformer) {
        resource = 'reference.conf'
    }
    archiveFileName.set('oidc-server.jar')
    zip64 = true
}

docker {
    name 'severeone/oidc-server:' + versionProps.getProperty('version.semver')
    tags 'latest'
    tag 'ecr', 'severeone/oidc-server'
    dockerfile file('Dockerfile')
    files tasks.shadowJar.outputs, 'config.yml', 'secrets/keystore.jks', 'secrets/truststore.jks',
            'secrets/id-token-key', 'secrets/access-token-key', 'secrets/admin-token'
    pull true
    noCache true
}

task createLocalDir {
    doLast { mkdir 'local/log' }
}

